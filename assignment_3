# Assignment on List - Level 1

def find_leap_years(given_year):
    i=0 
    count=0 
    list_of_leap_years=[]
    while count!=15:
        if ((given_year%4==0) and (given_year%400==0 or given_year%100!=0)):
            list_of_leap_years.insert(i,given_year)
            count+=1
            i+=1 
        given_year+=1     
    

    # Write your logic here

    return list_of_leap_years

list_of_leap_years=find_leap_years(2000)
print(list_of_leap_years)


# Assignment on List - Level 2

def calculate_bill_amount(gems_list, price_list, reqd_gems,reqd_quantity):
    bill_amount=0
    #Write your logic here
    for gem in reqd_gems:
        if gem in gems_list:
            i1=gems_list.index(gem)
            i2=reqd_gems.index(gem)
            bill_amount=bill_amount+(reqd_quantity[i2]*price_list[i1])
            if bill_amount>30000:
                bill_amount=bill_amount - ((bill_amount*5)/100)
        else:
           return -1
    return bill_amount

#List of gems available in the store
gems_list=["Emerald","Ivory","Jasper","Ruby","Garnet"]

#Price of gems available in the store. gems_list and price_list have one-to-one correspondence
price_list=[1760,2119,1599,3920,3999]

#List of gems required by the customer
reqd_gems=["Ivory","Emed","Garnet"]

#Quantity of gems required by the customer. reqd_gems and reqd_quantity have one-to-one correspondence
reqd_quantity=[3,10,12]

bill_amount=calculate_bill_amount(gems_list, price_list, reqd_gems, reqd_quantity)
print(bill_amount)



# Assignment on List - Level 2 (Puzzle)

#lex_auth_01269441913243238467

def create_largest_number(number_list):
    number_list.sort()
    res = ""
    for num in number_list:
        res = str(num) + res

    return (int(res))
        

number_list=[87,66,11]
largest_number=create_largest_number(number_list)
print(largest_number)



# Assignment on String - Level 1

def check_palindrome(word):
    x=word[::-1]
    if x== word:
        return True
    else:
        return False

status=check_palindrome("malayalam")
if(status):
    print("word is palindrome")
else:
    print("word is not palindrome")



# Assignment on String - Level 2

def encode(message):
    output=''
    privious=message[0]
    i=1
    count=1
    while len(message)>i:
        if privious==message[i]:
            count+=1
        else:
            output+=str(count)+privious
            count=1
            privious=message[i]

        if i==len(message)-1:
            output += str(count) + privious
        i+=1
    if len(message)==1:
        output += str(count) + privious
    return output

#Provide different values for message and test your program
encoded_message=encode("ABBBBCCCCCCCCAB")
print(encoded_message)



# Assignment on Tuple - Level 2

child_id=(10,20,30,40,50)
chocolates_received=[12,5,3,4,6]

def calculate_total_chocolates():
    sum = 0
    for choco in chocolates_received:
        sum = sum + choco

    return sum

def reward_child(child_id_rewarded,extra_chocolates):
    if extra_chocolates < 1:
        print("Extra chocolates is less than 1")
    elif child_id_rewarded not in child_id:
        print("Child id is invalid")
    else:
        length = len(child_id)

        for num in range(length-1):
            if child_id_rewarded == child_id[num]:
                chocolates_received[num] = chocolates_received[num] + extra_chocolates
        print(chocolates_received)


print(calculate_total_chocolates())
#Test your code by passing different values for child_id_rewarded,extra_chocolates
reward_child(20,2)